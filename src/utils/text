export function fetchAPI(store, meta, data) {
    if (!meta) { meta = {} };
    if (!meta.opts) { meta.opts = {} };
    if (typeof(meta.opts.debounce) === 'undefined') { meta.opts.debounce = false };
    if (typeof(meta.opts.singleton) === 'undefined') { meta.opts.singleton = false };
    let state = store.getState();
    let base;
    if(!meta.base)
    {
        base = state.app.url;
    }
    else
    {
        base = meta.base;
    }
    console.log(base, meta);
    if (typeof(meta.opts.altBase) !== 'undefined') { base = meta.opts.altBase; }
    if (typeof(meta.opts.altBase) !== 'undefined') { console.warn('call to [', meta.endpoint, '] using alt base [', meta.opts.altBase, ']');}
    meta.req = data;
    meta.base = base;
    let e = {
        payload: {
            meta: meta,
        }
    };

    let json;
    try {
        json = JSON.stringify(data);
    } catch(ex) {
        throw new error('Unable to parse data with [' + ex + ']');
    }

    let timeoutPromise = (ms, promise) =>
    {
        return new Promise((resolve,reject)=>
        {
            promise.then(resolve, reject);
            setTimeout(()=>{
              reject(new Error("Timed out"))
            }, ms);

        })
    };

    let promise=null;

    let sha1 = require('sha1');
    let md5 = require('md5');
    let time = new Date().getTime();
    let contentType = 'application/json';
    data.token = sha1(md5(json) + '\n' + time + '\n' + contentType);
    data.time = time;

    if(window.location.href.indexOf('localhost') >= 0){
        promise = timeoutPromise(timeoutMilliSec,fetch(base + meta.endpoint, {
            meta: meta,
            method: 'post',
            headers: {
                'Accept': contentType,
                'Content-Type': contentType
            },
            json: data,
            body: JSON.stringify(data)
        }).catch( err => {
            let t = {...e};
            t.type = FETCH_ERRORED;
            t.payload.errorMessage = 'Unable to connect to the server.';
            error( t );
            store.dispatch( t );
        })).catch(
            err => {
            let t = {...e};
            t.type = FETCH_ERRORED;
            t.payload.errorMessage = 'Request Timed Out.';
            error( t );
            store.dispatch( t );
        });
    }else{
          promise = timeoutPromise(timeoutMilliSec,fetch(base + meta.endpoint, {
              meta: meta,
              method: 'post',
              credentials: 'include',
              headers: {
                  'Accept': contentType,
                  'Content-Type': contentType
              },
              json: data,
              body: JSON.stringify(data)
          }).catch( err => {
              let t = {...e};
              t.type = FETCH_ERRORED;
              t.payload.errorMessage = 'Unable to connect to the server.';
              error( t );
              store.dispatch( t );
          })).catch(
              err => {
              let t = {...e};
              t.type = FETCH_ERRORED;
              t.payload.errorMessage = 'Request Timed Out.';
              error( t );
              store.dispatch( t );
          });
    }
    let s = {...e};
    s.type = FETCH_STARTED;
    s.payload.promise = promise;
    log(s);
    store.dispatch( s );

    return promise
    .then( rsp => {
        if (rsp.status != 200) { // Bad http response
            e.type = FETCH_FAILED;
            e.payload.errorMessage = 'Invalid server status';
            error( e );
            store.dispatch( e );
            return;
        }
        return rsp.json();
    })
    .then( json => {
        // This line will dump the service result to the console
        //console.log(JSON.stringify(json));
        if(json === undefined){
            e.type = FETCH_FAILED;
            e.payload.errorMessage = 'Missing Json Response';
             e.payload.response = json;
            error( e );
            store.dispatch( e );
            return;

        }
		if (!json[meta.unwrapper] && json.errDescription!=undefined) {  // Invalid response structure
            let wrap={};
            wrap[meta.unwrapper] = json;
			json=wrap;
		}
		if (!json[meta.unwrapper]) { // Invalid response structure
            e.type = FETCH_FAILED;
            e.payload.errorMessage = 'Missing expected unwrapper [' + meta.unwrapper + '] data [' + JSON.stringify(json) + ']';
            e.payload.response = json;
            error( e );
            store.dispatch( e );
            return;
        }
        e.payload.data = json[meta.unwrapper];
        if (json[meta.unwrapper].status != 'SUCCESS' && meta.endpoint !== 'testInterface' ) { // Response was not successful

            e.type = FETCH_FAILED;
            e.payload.errorMessage = json[meta.unwrapper].responseText || json[meta.unwrapper].errDescription;
            if(!(json[meta.unwrapper].responseText || json[meta.unwrapper].errDescription))
            {
                e.payload.errorMessage = "Failed to retrieve Data.";
            }

            error( e );
            store.dispatch( e );
            return;
        }
        e.type = FETCH_COMPLETED;
        log(e);
        store.dispatch( e );
        if (meta.opts.altEvent) { // Also dispatch to an alternate event
            let t = {...e};
            t.type = meta.opts.altEvent;
            t.alt = true;
            log(t);
            store.dispatch( t );
        }
    }).catch(err => { // Invalid JSON response
		let t = {...e};
        t.type = FETCH_ERRORED;
        t.payload.errorMessage = 'There was an issue while processing your request. Please try again. If the problem persists, please contact SSRC.';
        error( t );
        store.dispatch( t );
	});
}